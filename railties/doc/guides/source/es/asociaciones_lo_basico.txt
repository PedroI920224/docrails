<!-- -*- coding: utf-8; -*- -->

Guía de asociaciones de Active Record.
======================================

Esta guía abarca las características de las asociaciones de Active Record. A partir de esta guía ud. podrá:

* Declarar asociaciones entre modelos Active Record
* Comprender los diferentes tipos de asociaciones de Active Record
* Usar los métodos agregados a sus modelos por la creación de las asociaciones

== ¿Por qué Asociaciones ?

¿Por qué necesitamos asociaciones entre los modelos? Porque hacen más simples y fáciles las operaciones comunes su código. Por ejemplo, considere una aplicación Rails que incluye un modelo para los clientes y un modelo para los pedidos. Cada cliente puede tener muchos pedidos. Sin las asociaciones, las declaraciones del modelo se verían así:

[source, ruby]
-------------------------------------------------------
class Customer < ActiveRecord::Base
end

class Order < ActiveRecord::Base
end
-------------------------------------------------------

Ahora supongamos que queremos agregar un nuevo pedido para un cliente existente. Deberíamos tener que hacer algo como esto:

[source, ruby]
-------------------------------------------------------
@order = Order.create(:order_date => Time.now, :customer_id => @customer.id)
-------------------------------------------------------

O considere eliminar un cliente, y asegurarse que todos sus pedidos sean eliminados también.

[source, ruby]
-------------------------------------------------------
@orders = Order.find_by_customer_id(@customer.id)
@orders.each do |order|
  order.destroy
end
@customer.destroy
-------------------------------------------------------

Con las asociaciones de Active Record, podemos hacer esto - y otras - cosas más fácil declarativamente diciéndole a Rails que hay una conexión entre los dos modelos. Este es el código con asociaciones para los clientes y los pedidos.

[source, ruby]
-------------------------------------------------------
class Customer < ActiveRecord::Base
  has_many :orders
end

class Order < ActiveRecord::Base
  belongs_to :customer
end
-------------------------------------------------------

Con este cambio, crear un nuevo pedido para un cliente es más fácil:

[source, ruby]
-------------------------------------------------------
@order = @customer.orders.create(:order_date => Time.now)
-------------------------------------------------------

Eliminar un cliente y todos sus pedidos es _mucho_ más fácil:

[source, ruby]
-------------------------------------------------------
@customer.destroy
-------------------------------------------------------

Para aprender más acerca de los diferentes tipos de asociaciones, lea la siguiente sección de esta Guía. Lo que sigue son algunos consejos y trucos para trabajar con asociaciones, y luego una referencia completa de los métodos y opciones para las asociaciones en Rails.

== Los tipos de las asociaciones

En Rails, una _asociación_ es una conexión entre dos modelos Active Record. Las asociaciones están implementadas usando llamadas de macro-estilo, entonces ud. puede agregar características declarativamente a sus modelos. Por ejemplo, declarando que un modelo +pertenece a+ (n. del t. belongs_to) otro, ud. le ordena a Rails que mantenga la información Clave Primaria-Clave Foránea entre las instancias de los dos modelos, y obtendrá un número de métodos de utilidad agregados a su modelo. Rails soporta seis tipos de asociaciones:

* +belongs_to+
* +has_one+
* +has_many+
* +has_many :through+
* +has_one :through+
* +has_and_belongs_to_many+

En el resto de esta guía, ud. aprenderá como declarar y usar las diferentes formas de asociaciones. Pero primero, una introducción rápida a las situaciones dónde es apropiado cada tipo de asociacion.

=== La asociación +belongs_to+ (n. del t. Pertenece a)

La asociación +belongs_to+ establece una conexión uno-a-uno con otro modelo, tal que cada instancia del modelo dónde se hace la declaración "pertence a" una instancia del otro modelo. Por ejmplo, si su aplicación incluye clientes y pedidos, y cada pedido es asignado a exactamente un cliente, bería declarar el modelo de pedido así:

[source, ruby]
-------------------------------------------------------
class Order < ActiveRecord::Base
  belongs_to :customer
end
-------------------------------------------------------


